name: 'upgrade es-abstract'

on: workflow_dispatch

permissions:
  contents: read

jobs:
  matrix:
    runs-on: ubuntu-latest
    outputs:
      repos: ${{ steps.set-matrix.outputs.repos }}
    steps:
      - name: Harden Runner
        uses: step-security/harden-runner@v2
        with:
          disable-sudo: true
          egress-policy: audit
          allowed-endpoints: >
              github.com:443
              raw.githubusercontent.com:443
              nodejs.org:443
              iojs.org:443
              registry.npmjs.org:443
              actions-results-receiver-production.githubapp.com:443

      - name: Set matrix
        id: set-matrix
        run: |
          REPOS=$(gh api repos/es-shims/.github/git/trees/repos-with-es-abstract?recursive=1 --jq '[.tree[] | select(.type=="blob") | .path]')
          echo "repos=$REPOS" >> $GITHUB_OUTPUT
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  qualify:
    name: '?'
    runs-on: ubuntu-latest
    needs: [matrix]
    permissions:
      contents: read
    strategy:
      fail-fast: false
      matrix:
        repository: ${{ fromJson(needs.matrix.outputs.repos) }}
    steps:
      - name: Harden Runner
        uses: step-security/harden-runner@v2
        with:
          disable-sudo: true
          egress-policy: audit
          allowed-endpoints: >
              github.com:443
              raw.githubusercontent.com:443
              nodejs.org:443
              iojs.org:443
              registry.npmjs.org:443
              actions-results-receiver-production.githubapp.com:443

      - uses: actions/checkout@v4
        with:
          repository: ${{ matrix.repository }}
          token: ${{ secrets.GH_TOKEN }}
      - uses: ljharb/actions/node/install@main

      - run: |
          npm install --save "es-abstract@^$(npm show es-abstract versions --json | jq '.[-1]' -r)"
      - run: |
          wget https://raw.githack.com/es-shims/.github/main/codemods/es-abstract.mjs
        working-directory: /home/runner/.nvm/
      - name: codemod all the files
        run: |
          npx glob@latest '**/*.js' --ignore 'node_modules/**' | xargs npx jscodeshift -t /home/runner/.nvm/es-abstract.mjs
      - name: delete unused files
        run: |
          npx @ljharb/unused-files --ignorePattern={auto,polyfill,implementation,shim}.js --ignorePattern='test/**' --ignorePattern='tests/**' | xargs -I {} rm {}
      - name: autofix linting errors
        run: |
          npm run lint --ignore-scripts -- --quiet --fix || npx eslint --ext=js,mjs . --quiet --fix
      - name: fail if any old year AOs remain
        run: |
          YEAR="$(ls -F node_modules/es-abstract/ | \grep -E '\d+\/' | sort -n | tail -n1 | cut -d \/ -f1)"
          if [ "$(git grep -P 'es-abstract\/\d+' | grep -cv "es-abstract/${YEAR}")" -ne 0 ]; then
            >&2 echo "es-abstract is not updated to ${YEAR} in all files - needs manual update."
            exit 1
          fi
      - run: git status
      - run: git --no-pager diff

      - name: Check for changes besides package.json
        id: check-changes
        run: |
          if [ "$(git --no-pager diff --name-only | grep -v package.json | wc -l)" -ne 0 ]; then
            echo true
            echo "changes_exist=true" >> $GITHUB_OUTPUT
          else
            echo false
            echo "changes_exist=false" >> $GITHUB_OUTPUT
          fi

      - run: npm test
        if: steps.check-changes.outputs.changes_exist == 'true'

      - name: create patch file
        if: steps.check-changes.outputs.changes_exist == 'true'
        run: |
          DIRNAME="patches/$(dirname "${{ matrix.repository }}")"
          FILENAME="patches/${{ matrix.repository }}.patch"
          mkdir -p "${DIRNAME}"
          git diff > "${FILENAME}"

      - name: preprocess repository slug
        if: steps.check-changes.outputs.changes_exist == 'true'
        id: preprocess-repo-slug
        run: |
          SLUG="$(echo '${{ matrix.repository }}' | sed 's/\//__/g')"
          echo "REPO_SLUG=${SLUG}" >> $GITHUB_OUTPUT
          echo "${SLUG}"

      - name: upload patch file
        if: steps.check-changes.outputs.changes_exist == 'true'
        uses: actions/upload-artifact@v4
        with:
          name: patch-${{ steps.preprocess-repo-slug.outputs.REPO_SLUG }}
          path: patches/${{ matrix.repository }}.patch

  aggregate:
    runs-on: ubuntu-latest
    needs: [qualify]
    outputs:
      matrix: ${{ steps.create-matrix.outputs.matrix }}
    steps:
      - name: Harden Runner
        uses: step-security/harden-runner@v2
        with:
          disable-sudo: true
          egress-policy: audit
          allowed-endpoints: >
              github.com:443
              raw.githubusercontent.com:443
              nodejs.org:443
              iojs.org:443
              registry.npmjs.org:443
              actions-results-receiver-production.githubapp.com:443

      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: patches/

      - name: Prepare matrix for upgrade job
        id: create-matrix
        run: |
          PATCH_FILES=$(find patches -mindepth 1 -maxdepth 1 -type d -print | sed 's|patches/patch-||' | sed 's|__|/|g' | jq -R -s -c 'split("\n")[:-1]')
          echo "matrix=${PATCH_FILES}" >> $GITHUB_OUTPUT
          echo "${PATCH_FILES}"

      - name: Debug - List patches directory
        run: ls -l patches/

  upgrade:
    runs-on: ubuntu-latest
    needs: [aggregate]
    if: ${{ needs.aggregate.outputs.matrix != '[]' }}
    permissions:
      contents: write
    strategy:
      fail-fast: false
      matrix:
        repository: ${{ fromJson(needs.aggregate.outputs.matrix) }}
    steps:
      - uses: actions/checkout@v4
        with:
          repository: ${{ matrix.repository }}
          token: ${{ secrets.GH_TOKEN }}
      - uses: ljharb/actions/node/install@main

      - name: preprocess repository slug
        id: preprocess-repo-slug
        run: |
          echo "REPO_SLUG=$(echo '${{ matrix.repository }}' | sed 's/\//__/g')" >> $GITHUB_OUTPUT

      - name: download patch file
        uses: actions/download-artifact@v4
        with:
          name: patch-${{ steps.preprocess-repo-slug.outputs.REPO_SLUG }}
          path: patches/

      - name: Debug - List patches directory
        run: ls -l patches/

      - name: extract repository name
        id: extract-repo-name
        run: |
          echo "REPO_NAME=$(echo '${{ matrix.repository }}' | cut -d / -f2)" >> $GITHUB_OUTPUT

      - name: Apply patch
        run: |
          git apply "./patches/${{ steps.extract-repo-name.outputs.REPO_NAME }}.patch"

      - uses: stefanzweifel/git-auto-commit-action@v5
        with:
          commit_message: '[Deps] update `es-abstract`'
          push_options: --dry-run
